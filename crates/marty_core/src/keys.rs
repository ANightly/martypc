/*
    MartyPC
    https://github.com/dbalsom/martypc

    Copyright 2022-2024 Daniel Balsom

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the “Software”),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    --------------------------------------------------------------------------

    keys.rs

    Defines the MartyKey enum, MartyPC's internal keycode representation.
    Names are based on the W3C's keycode naming convention:

    https://w3c.github.io/uievents-code/#code-value-tables

    Frontend libraries should define a TranslateKey trait to convert the
    implementation-specific keycodes into MartyKey(s), such as:

    pub trait TranslateKey {
        fn to_internal(key_code: ImplementationKeyCode) -> MartyKey;
    }
*/
use serde::Deserialize;
use strum_macros::{EnumIter, EnumString};

#[derive(Copy, Clone, Debug, EnumIter, EnumString, Deserialize, PartialEq, Eq, Hash)]
pub enum MartyKey {
    None,
    Backquote,
    Backslash,
    BracketLeft,
    BracketRight,
    Comma,
    Digit0,
    Digit1,
    Digit2,
    Digit3,
    Digit4,
    Digit5,
    Digit6,
    Digit7,
    Digit8,
    Digit9,
    Equal,
    IntlBackslash,
    IntlRo,
    IntlYen,
    KeyA,
    KeyB,
    KeyC,
    KeyD,
    KeyE,
    KeyF,
    KeyG,
    KeyH,
    KeyI,
    KeyJ,
    KeyK,
    KeyL,
    KeyM,
    KeyN,
    KeyO,
    KeyP,
    KeyQ,
    KeyR,
    KeyS,
    KeyT,
    KeyU,
    KeyV,
    KeyW,
    KeyX,
    KeyY,
    KeyZ,
    Minus,
    Period,
    Quote,
    Semicolon,
    Slash,
    AltLeft,
    AltRight,
    Backspace,
    CapsLock,
    ContextMenu,
    ControlLeft,
    ControlRight,
    Enter,
    MetaLeft,
    MetaRight,
    ShiftLeft,
    ShiftRight,
    Space,
    Tab,
    Convert,
    KanaMode,
    Lang1,
    Lang2,
    Lang3,
    Lang4,
    Lang5,
    NonConvert,
    Delete,
    End,
    Help,
    Home,
    Insert,
    PageDown,
    PageUp,
    ArrowDown,
    ArrowLeft,
    ArrowRight,
    ArrowUp,
    NumLock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadBackspace,
    NumpadClear,
    NumpadClearEntry,
    NumpadComma,
    NumpadDecimal,
    NumpadDivide,
    NumpadEnter,
    NumpadEqual,
    NumpadHash,
    NumpadMemoryAdd,
    NumpadMemoryClear,
    NumpadMemoryRecall,
    NumpadMemoryStore,
    NumpadMemorySubtract,
    NumpadMultiply,
    NumpadParenLeft,
    NumpadParenRight,
    NumpadStar,
    NumpadSubtract,
    Escape,
    Fn,
    FnLock,
    PrintScreen,
    ScrollLock,
    Pause,
    BrowserBack,
    BrowserFavorites,
    BrowserForward,
    BrowserHome,
    BrowserRefresh,
    BrowserSearch,
    BrowserStop,
    Eject,
    LaunchApp1,
    LaunchApp2,
    LaunchMail,
    MediaPlayPause,
    MediaSelect,
    MediaStop,
    MediaTrackNext,
    MediaTrackPrevious,
    Power,
    Sleep,
    AudioVolumeDown,
    AudioVolumeMute,
    AudioVolumeUp,
    WakeUp,
    Meta,
    Hyper,
    Turbo,
    Abort,
    Resume,
    Suspend,
    Again,
    Copy,
    Cut,
    Find,
    Open,
    Paste,
    Props,
    Select,
    Undo,
    Hiragana,
    Katakana,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    F25,
    F26,
    F27,
    F28,
    F29,
    F30,
    F31,
    F32,
    F33,
    F34,
    F35,
}

/*
impl FromStr for MartyKey {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "None" => Ok(MartyKey::None),
            "Backquote" => Ok(MartyKey::Backquote),
            "Backslash" => Ok(MartyKey::Backslash),
            "BracketLeft" => Ok(MartyKey::BracketLeft),
            "BracketRight" => Ok(MartyKey::BracketRight),
            "Comma" => Ok(MartyKey::Comma),
            "Digit0" => Ok(MartyKey::Digit0),
            "Digit1" => Ok(MartyKey::Digit1),
            "Digit2" => Ok(MartyKey::Digit2),
            "Digit3" => Ok(MartyKey::Digit3),
            "Digit4" => Ok(MartyKey::Digit4),
            "Digit5" => Ok(MartyKey::Digit5),
            "Digit6" => Ok(MartyKey::Digit6),
            "Digit7" => Ok(MartyKey::Digit7),
            "Digit8" => Ok(MartyKey::Digit8),
            "Digit9" => Ok(MartyKey::Digit9),
            "Equal" => Ok(MartyKey::Equal),
            "IntlBackslash" => Ok(MartyKey::IntlBackslash),
            "IntlRo" => Ok(MartyKey::IntlRo),
            "IntlYen" => Ok(MartyKey::IntlYen),
            "KeyA" => Ok(MartyKey::KeyA),
            "KeyB" => Ok(MartyKey::KeyB),
            "KeyC" => Ok(MartyKey::KeyC),
            "KeyD" => Ok(MartyKey::KeyD),
            "KeyE" => Ok(MartyKey::KeyE),
            "KeyF" => Ok(MartyKey::KeyF),
            "KeyG" => Ok(MartyKey::KeyG),
            "KeyH" => Ok(MartyKey::KeyH),
            "KeyI" => Ok(MartyKey::KeyI),
            "KeyJ" => Ok(MartyKey::KeyJ),
            "KeyK" => Ok(MartyKey::KeyK),
            "KeyL" => Ok(MartyKey::KeyL),
            "KeyM" => Ok(MartyKey::KeyM),
            "KeyN" => Ok(MartyKey::KeyN),
            "KeyO" => Ok(MartyKey::KeyO),
            "KeyP" => Ok(MartyKey::KeyP),
            "KeyQ" => Ok(MartyKey::KeyQ),
            "KeyR" => Ok(MartyKey::KeyR),
            "KeyS" => Ok(MartyKey::KeyS),
            "KeyT" => Ok(MartyKey::KeyT),
            "KeyU" => Ok(MartyKey::KeyU),
            "KeyV" => Ok(MartyKey::KeyV),
            "KeyW" => Ok(MartyKey::KeyW),
            "KeyX" => Ok(MartyKey::KeyX),
            "KeyY" => Ok(MartyKey::KeyY),
            "KeyZ" => Ok(MartyKey::KeyZ),
            "Minus" => Ok(MartyKey::Minus),
            "Period" => Ok(MartyKey::Period),
            "Quote" => Ok(MartyKey::Quote),
            "Semicolon" => Ok(MartyKey::Semicolon),
            "Slash" => Ok(MartyKey::Slash),
            "AltLeft" => Ok(MartyKey::AltLeft),
            "AltRight" => Ok(MartyKey::AltRight),
            "Backspace" => Ok(MartyKey::Backspace),
            "CapsLock" => Ok(MartyKey::CapsLock),
            "ContextMenu" => Ok(MartyKey::ContextMenu),
            "ControlLeft" => Ok(MartyKey::ControlLeft),
            "ControlRight" => Ok(MartyKey::ControlRight),
            "Enter" => Ok(MartyKey::Enter),
            "MetaLeft" => Ok(MartyKey::MetaLeft),
            "MetaRight" => Ok(MartyKey::MetaRight),
            "ShiftLeft" => Ok(MartyKey::ShiftLeft),
            "ShiftRight" => Ok(MartyKey::ShiftRight),
            "Space" => Ok(MartyKey::Space),
            "Tab" => Ok(MartyKey::Tab),
            "Convert" => Ok(MartyKey::Convert),
            "KanaMode" => Ok(MartyKey::KanaMode),
            "Lang1" => Ok(MartyKey::Lang1),
            "Lang2" => Ok(MartyKey::Lang2),
            "Lang3" => Ok(MartyKey::Lang3),
            "Lang4" => Ok(MartyKey::Lang4),
            "Lang5" => Ok(MartyKey::Lang5),
            "NonConvert" => Ok(MartyKey::NonConvert),
            "Delete" => Ok(MartyKey::Delete),
            "End" => Ok(MartyKey::End),
            "Help" => Ok(MartyKey::Help),
            "Home" => Ok(MartyKey::Home),
            "Insert" => Ok(MartyKey::Insert),
            "PageDown" => Ok(MartyKey::PageDown),
            "PageUp" => Ok(MartyKey::PageUp),
            "ArrowDown" => Ok(MartyKey::ArrowDown),
            "ArrowLeft" => Ok(MartyKey::ArrowLeft),
            "ArrowRight" => Ok(MartyKey::ArrowRight),
            "ArrowUp" => Ok(MartyKey::ArrowUp),
            "NumLock" => Ok(MartyKey::NumLock),
            "Numpad0" => Ok(MartyKey::Numpad0),
            "Numpad1" => Ok(MartyKey::Numpad1),
            "Numpad2" => Ok(MartyKey::Numpad2),
            "Numpad3" => Ok(MartyKey::Numpad3),
            "Numpad4" => Ok(MartyKey::Numpad4),
            "Numpad5" => Ok(MartyKey::Numpad5),
            "Numpad6" => Ok(MartyKey::Numpad6),
            "Numpad7" => Ok(MartyKey::Numpad7),
            "Numpad8" => Ok(MartyKey::Numpad8),
            "Numpad9" => Ok(MartyKey::Numpad9),
            "NumpadAdd" => Ok(MartyKey::NumpadAdd),
            "NumpadBackspace" => Ok(MartyKey::NumpadBackspace),
            "NumpadClear" => Ok(MartyKey::NumpadClear),
            "NumpadClearEntry" => Ok(MartyKey::NumpadClearEntry),
            "NumpadComma" => Ok(MartyKey::NumpadComma),
            "NumpadDecimal" => Ok(MartyKey::NumpadDecimal),
            "NumpadDivide" => Ok(MartyKey::NumpadDivide),
            "NumpadEnter" => Ok(MartyKey::NumpadEnter),
            "NumpadEqual" => Ok(MartyKey::NumpadEqual),
            "NumpadHash" => Ok(MartyKey::NumpadHash),
            "NumpadMemoryAdd" => Ok(MartyKey::NumpadMemoryAdd),
            "NumpadMemoryClear" => Ok(MartyKey::NumpadMemoryClear),
            "NumpadMemoryRecall" => Ok(MartyKey::NumpadMemoryRecall),
            "NumpadMemoryStore" => Ok(MartyKey::NumpadMemoryStore),
            "NumpadMemorySubtract" => Ok(MartyKey::NumpadMemorySubtract),
            "NumpadMultiply" => Ok(MartyKey::NumpadMultiply),
            "NumpadParenLeft" => Ok(MartyKey::NumpadParenLeft),
            "NumpadParenRight" => Ok(MartyKey::NumpadParenRight),
            "NumpadStar" => Ok(MartyKey::NumpadStar),
            "NumpadSubtract" => Ok(MartyKey::NumpadSubtract),
            "Escape" => Ok(MartyKey::Escape),
            "Fn" => Ok(MartyKey::Fn),
            "FnLock" => Ok(MartyKey::FnLock),
            "PrintScreen" => Ok(MartyKey::PrintScreen),
            "ScrollLock" => Ok(MartyKey::ScrollLock),
            "Pause" => Ok(MartyKey::Pause),
            "BrowserBack" => Ok(MartyKey::BrowserBack),
            "BrowserFavorites" => Ok(MartyKey::BrowserFavorites),
            "BrowserForward" => Ok(MartyKey::BrowserForward),
            "BrowserHome" => Ok(MartyKey::BrowserHome),
            "BrowserRefresh" => Ok(MartyKey::BrowserRefresh),
            "BrowserSearch" => Ok(MartyKey::BrowserSearch),
            "BrowserStop" => Ok(MartyKey::BrowserStop),
            "Eject" => Ok(MartyKey::Eject),
            "LaunchApp1" => Ok(MartyKey::LaunchApp1),
            "LaunchApp2" => Ok(MartyKey::LaunchApp2),
            "LaunchMail" => Ok(MartyKey::LaunchMail),
            "MediaPlayPause" => Ok(MartyKey::MediaPlayPause),
            "MediaSelect" => Ok(MartyKey::MediaSelect),
            "MediaStop" => Ok(MartyKey::MediaStop),
            "MediaTrackNext" => Ok(MartyKey::MediaTrackNext),
            "MediaTrackPrevious" => Ok(MartyKey::MediaTrackPrevious),
            "Power" => Ok(MartyKey::Power),
            "Sleep" => Ok(MartyKey::Sleep),
            "AudioVolumeDown" => Ok(MartyKey::AudioVolumeDown),
            "AudioVolumeMute" => Ok(MartyKey::AudioVolumeMute),
            "AudioVolumeUp" => Ok(MartyKey::AudioVolumeUp),
            "WakeUp" => Ok(MartyKey::WakeUp),
            "Meta" => Ok(MartyKey::Meta),
            "Hyper" => Ok(MartyKey::Hyper),
            "Turbo" => Ok(MartyKey::Turbo),
            "Abort" => Ok(MartyKey::Abort),
            "Resume" => Ok(MartyKey::Resume),
            "Suspend" => Ok(MartyKey::Suspend),
            "Again" => Ok(MartyKey::Again),
            "Copy" => Ok(MartyKey::Copy),
            "Cut" => Ok(MartyKey::Cut),
            "Find" => Ok(MartyKey::Find),
            "Open" => Ok(MartyKey::Open),
            "Paste" => Ok(MartyKey::Paste),
            "Props" => Ok(MartyKey::Props),
            "Select" => Ok(MartyKey::Select),
            "Undo" => Ok(MartyKey::Undo),
            "Hiragana" => Ok(MartyKey::Hiragana),
            "Katakana" => Ok(MartyKey::Katakana),
            "F1" => Ok(MartyKey::F1),
            "F2" => Ok(MartyKey::F2),
            "F3" => Ok(MartyKey::F3),
            "F4" => Ok(MartyKey::F4),
            "F5" => Ok(MartyKey::F5),
            "F6" => Ok(MartyKey::F6),
            "F7" => Ok(MartyKey::F7),
            "F8" => Ok(MartyKey::F8),
            "F9" => Ok(MartyKey::F9),
            "F10" => Ok(MartyKey::F10),
            "F11" => Ok(MartyKey::F11),
            "F12" => Ok(MartyKey::F12),
            "F13" => Ok(MartyKey::F13),
            "F14" => Ok(MartyKey::F14),
            "F15" => Ok(MartyKey::F15),
            "F16" => Ok(MartyKey::F16),
            "F17" => Ok(MartyKey::F17),
            "F18" => Ok(MartyKey::F18),
            "F19" => Ok(MartyKey::F19),
            "F20" => Ok(MartyKey::F20),
            "F21" => Ok(MartyKey::F21),
            "F22" => Ok(MartyKey::F22),
            "F23" => Ok(MartyKey::F23),
            "F24" => Ok(MartyKey::F24),
            "F25" => Ok(MartyKey::F25),
            "F26" => Ok(MartyKey::F26),
            "F27" => Ok(MartyKey::F27),
            "F28" => Ok(MartyKey::F28),
            "F29" => Ok(MartyKey::F29),
            "F30" => Ok(MartyKey::F30),
            "F31" => Ok(MartyKey::F31),
            "F32" => Ok(MartyKey::F32),
            "F33" => Ok(MartyKey::F33),
            "F34" => Ok(MartyKey::F34),
            "F35" => Ok(MartyKey::F35),
            _ => Err(format!("Unknown variant: {}", s)),
        }
    }
}*/
