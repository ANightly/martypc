[package]
name = "martypc_eframe"
version.workspace = true
authors.workspace = true
edition.workspace = true
include = ["LICENSE-MIT", "**/*.rs", "Cargo.toml"]
rust-version = "1.81"

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]

[dependencies]
# Required Dependencies
# ---------------------------------------------------------------------------------------------------------------------
# Internal crates
# --------------
marty_core = { path = "../../core", default-features = false }
config_toml_bpaf = { path = "../../lib/frontend/config_toml_bpaf" }
display_manager_eframe = { path = "../../lib/frontend/display_manager_eframe" }
videocard_renderer = { path = "../../lib/frontend/videocard_renderer" }
marty_egui = { path = "../../lib/frontend/marty_egui" }
marty_egui_eframe = { path = "../../lib/frontend/marty_egui_eframe" }
frontend_common = { path = "../../lib/frontend/frontend_common" }
fluxfox = { workspace = true, features = ["core", "viz", "tiny_skia", "fat", "ibm_pc"] }

# External crates
# ----------------
# We need winit separately from eframe for raw input support
winit = { workspace = true }
#winit = { version = "0.30", default-features = false }
egui = { workspace = true, default-features = false }
eframe = { workspace = true, default-features = false }
egui_extras = { version = "0.30", default-features = false, features = ["file", "image"] }

log = "0.4"
serde = { version = "1", features = ["derive"] }
crossbeam-channel = "0.5.13"
anyhow = "1.0"
strum = "0.26"
# url is used for the wasm build to be configured via url and fetch resources.
# it is not optional as we may want to fetch things from the web from native, in the future.
url = "2.5"

# Optional Dependencies
# ---------------------------------------------------------------------------------------------------------------------
rodio = {  workspace = true, optional = true }
# wgpu is used if use_wgpu feature is enabled.
wgpu = { workspace = true, optional = true }

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.11"
eframe = { version = "0.30", default-features = false, features = [
    "accesskit",     # Make egui compatible with screen readers. NOTE: adds a lot of dependencies.
    "default_fonts", # Embed the default egui fonts.
    "persistence",   # Enable restoring app state when restarting the app.
    "wayland",       # Add wayland support for Linux/CI
]}
serialport  = { workspace = true }

# Enable DX12 backend on windows
[target.'cfg(target_os = "windows")'.dependencies]
wgpu = { version = "23.0", features = ["dx12"] }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-futures.workspace = true
web-sys.workspace = true
# No need for accesskit or wayland on web.
eframe = { version = "0.30", default-features = false, features = [
    "default_fonts", # Embed the default egui fonts.
    "persistence",   # Enable restoring app state when restarting the app.
]}

[features]
default = ["ega", "vga"]
sound = ["dep:rodio", "marty_core/sound"]
# Use the wgpu backend
use_wgpu = ["eframe/wgpu", "frontend_common/use_wgpu"]
# Use the glow backend
glow = ["eframe/glow"]
devtools = []
arduino_validator = ["marty_core/arduino_validator"]
cpu_validator = ["marty_core/cpu_validator"]
ega = ["marty_core/ega", "frontend_common/ega", "videocard_renderer/ega"]
vga = ["marty_core/vga", "frontend_common/vga", "videocard_renderer/vga"]
opl = ["marty_core/opl"]